{"version":3,"sources":["../../node_modules/dompurify/src/purify.js"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","factory","root","window","undefined","DOMPurify","version","removed","document","nodeType","isSupported","originalDocument","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","NamedNodeMap","MozNamedAttrMap","Text","Comment","DOMParser","useDOMParser","template","createElement","content","ownerDocument","implementation","createNodeIterator","getElementsByTagName","createDocumentFragment","importNode","hooks","createHTMLDocument","documentMode","_addToSet","set","array","l","length","toLowerCase","_cloneObj","object","property","newObject","hasOwnProperty","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","SAFE_FOR_JQUERY","SAFE_FOR_TEMPLATES","MUSTACHE_EXPR","ERB_EXPR","WHOLE_DOCUMENT","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_DOM_IMPORT","SANITIZE_DOM","KEEP_CONTENT","FORBID_CONTENTS","DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","CONFIG","formElement","_forceRemove","node","push","element","parentNode","removeChild","e","outerHTML","_removeAttribute","name","attribute","getAttributeNode","from","removeAttribute","_initDocument","dirty","doc","body","parseFromString","documentElement","firstElementChild","call","hasAttribute","_createIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","FILTER_ACCEPT","_isNode","obj","nodeName","_sanitizeElements","currentNode","tagName","_executeHook","elm","textContent","attributes","setAttribute","_isClobbered","allowedTags","insertAdjacentHTML","innerHTML","test","cloneNode","replace","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","_sanitizeAttributes","attr","value","lcName","idAttr","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","trim","id","Array","prototype","slice","apply","indexOf","pop","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","entryPoint","data","forEach","hook","sanitize","cfg","importedNode","oldNode","nodeIterator","returnNode","toString","TypeError","toStaticHTML","ADD_TAGS","ADD_ATTR","ADD_URI_SAFE_ATTR","Object","freeze","_parseConfig","appendChild","firstChild","addHook","hookFunction","removeHook","removeHooks","removeAllHooks","exports","__webpack_require__","module"],"mappings":"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","file":"static/js/6.53799b12.chunk.js","sourcesContent":[";\n\n(function (factory) {\n  'use strict';\n  /* global window: false, define: false, module: false */\n\n  var root = typeof window === 'undefined' ? null : window;\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return factory(root);\n    });\n  } else if (typeof module !== 'undefined') {\n    module.exports = factory(root);\n  } else {\n    root.DOMPurify = factory(root);\n  }\n})(function factory(window) {\n  'use strict';\n\n  var DOMPurify = function DOMPurify(window) {\n    return factory(window);\n  };\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n\n\n  DOMPurify.version = '0.8.7';\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n\n  DOMPurify.removed = [];\n\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n    return DOMPurify;\n  }\n\n  var document = window.document;\n  var originalDocument = document;\n  var DocumentFragment = window.DocumentFragment;\n  var HTMLTemplateElement = window.HTMLTemplateElement;\n  var Node = window.Node;\n  var NodeFilter = window.NodeFilter;\n  var NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap;\n  var Text = window.Text;\n  var Comment = window.Comment;\n  var DOMParser = window.DOMParser;\n  var useDOMParser = false; // See comment below\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n\n  if (typeof HTMLTemplateElement === 'function') {\n    var template = document.createElement('template');\n\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  var implementation = document.implementation;\n  var createNodeIterator = document.createNodeIterator;\n  var getElementsByTagName = document.getElementsByTagName;\n  var createDocumentFragment = document.createDocumentFragment;\n  var importNode = originalDocument.importNode;\n  var hooks = {};\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n\n  DOMPurify.isSupported = typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;\n  /* Add properties to a lookup table */\n\n  var _addToSet = function _addToSet(set, array) {\n    var l = array.length;\n\n    while (l--) {\n      if (typeof array[l] === 'string') {\n        array[l] = array[l].toLowerCase();\n      }\n\n      set[array[l]] = true;\n    }\n\n    return set;\n  };\n  /* Shallow clone an object */\n\n\n  var _cloneObj = function _cloneObj(object) {\n    var newObject = {};\n    var property;\n\n    for (property in object) {\n      if (object.hasOwnProperty(property)) {\n        newObject[property] = object[property];\n      }\n    }\n\n    return newObject;\n  };\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n\n\n  var ALLOWED_TAGS = null;\n\n  var DEFAULT_ALLOWED_TAGS = _addToSet({}, [// HTML\n  'a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr', // SVG\n  'svg', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern', // SVG Filters\n  'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'feSpecularLighting', 'feTile', 'feTurbulence', //MathML\n  'math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmuliscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mpspace', 'msqrt', 'mystyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', //Text\n  '#text']);\n  /* Allowed attribute names */\n\n\n  var ALLOWED_ATTR = null;\n\n  var DEFAULT_ALLOWED_ATTR = _addToSet({}, [// HTML\n  'accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'coords', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'span', 'srclang', 'start', 'src', 'step', 'style', 'summary', 'tabindex', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns', // SVG\n  'accent-height', 'accumulate', 'additivive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'mode', 'min', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'surfacescale', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'y', 'y1', 'y2', 'z', 'zoomandpan', // MathML\n  'accent', 'accentunder', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'display', 'displaystyle', 'fence', 'frame', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', // XML\n  'xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n\n  var FORBID_TAGS = null;\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n  var FORBID_ATTR = null;\n  /* Decide if ARIA attributes are okay */\n\n  var ALLOW_ARIA_ATTR = true;\n  /* Decide if custom data attributes are okay */\n\n  var ALLOW_DATA_ATTR = true;\n  /* Decide if unknown protocols are okay */\n\n  var ALLOW_UNKNOWN_PROTOCOLS = false;\n  /* Output should be safe for jQuery's $() factory? */\n\n  var SAFE_FOR_JQUERY = false;\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n\n  var SAFE_FOR_TEMPLATES = false;\n  /* Specify template detection regex for SAFE_FOR_TEMPLATES mode */\n\n  var MUSTACHE_EXPR = /\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm;\n  var ERB_EXPR = /<%[\\s\\S]*|[\\s\\S]*%>/gm;\n  /* Decide if document with <html>... should be returned */\n\n  var WHOLE_DOCUMENT = false;\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n\n  var FORCE_BODY = false;\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html string.\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n\n  var RETURN_DOM = false;\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html string */\n\n  var RETURN_DOM_FRAGMENT = false;\n  /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n   * `Node` is imported into the current `Document`. If this flag is not enabled the\n   * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n   * DOMPurify. */\n\n  var RETURN_DOM_IMPORT = false;\n  /* Output should be free from DOM clobbering attacks? */\n\n  var SANITIZE_DOM = true;\n  /* Keep element content when removing element? */\n\n  var KEEP_CONTENT = true;\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n\n  var FORBID_CONTENTS = _addToSet({}, ['audio', 'head', 'math', 'script', 'style', 'template', 'svg', 'video']);\n  /* Tags that are safe for data: URIs */\n\n\n  var DATA_URI_TAGS = _addToSet({}, ['audio', 'video', 'img', 'source', 'image']);\n  /* Attributes safe for values like \"javascript:\" */\n\n\n  var URI_SAFE_ATTRIBUTES = _addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);\n  /* Keep a reference to config to pass to hooks */\n\n\n  var CONFIG = null;\n  /* Ideally, do not touch anything below this line */\n\n  /* ______________________________________________ */\n\n  var formElement = document.createElement('form');\n  /**\n   * _parseConfig\n   *\n   * @param  optional config literal\n   */\n\n  var _parseConfig = function _parseConfig(cfg) {\n    /* Shield configuration object from tampering */\n    if (typeof cfg !== 'object') {\n      cfg = {};\n    }\n    /* Set configuration parameters */\n\n\n    ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? _addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? _addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n    FORBID_TAGS = 'FORBID_TAGS' in cfg ? _addToSet({}, cfg.FORBID_TAGS) : {};\n    FORBID_ATTR = 'FORBID_ATTR' in cfg ? _addToSet({}, cfg.FORBID_ATTR) : {};\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n    SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false\n\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n    RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false\n\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n    /* Merge configuration parameters */\n\n\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = _cloneObj(ALLOWED_TAGS);\n      }\n\n      _addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = _cloneObj(ALLOWED_ATTR);\n      }\n\n      _addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      _addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n    }\n    /* Add #text in case KEEP_CONTENT is set to true */\n\n\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    } // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n\n\n    if (Object && 'freeze' in Object) {\n      Object.freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n  /**\n    * _forceRemove\n    *\n    * @param  a DOM node\n    */\n\n\n  var _forceRemove = function _forceRemove(node) {\n    DOMPurify.removed.push({\n      element: node\n    });\n\n    try {\n      node.parentNode.removeChild(node);\n    } catch (e) {\n      node.outerHTML = '';\n    }\n  };\n  /**\n    * _removeAttribute\n    *\n    * @param  an Attribute name\n    * @param  a DOM node\n    */\n\n\n  var _removeAttribute = function _removeAttribute(name, node) {\n    DOMPurify.removed.push({\n      attribute: node.getAttributeNode(name),\n      from: node\n    });\n    node.removeAttribute(name);\n  };\n  /**\n    * _initDocument\n    *\n    * @param  a string of dirty markup\n    * @return a DOM, filled with the dirty markup\n    */\n\n\n  var _initDocument = function _initDocument(dirty) {\n    /* Create a HTML document */\n    var doc, body;\n    /* Fill body with bogus element */\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    }\n    /* Use DOMParser to workaround Firefox bug (see comment below) */\n\n\n    if (useDOMParser) {\n      try {\n        doc = new DOMParser().parseFromString(dirty, 'text/html');\n      } catch (e) {}\n    }\n    /* Otherwise use createHTMLDocument, because DOMParser is unsafe in\n       Safari (see comment below) */\n\n\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createHTMLDocument('');\n      body = doc.body;\n      body.parentNode.removeChild(body.parentNode.firstElementChild);\n      body.outerHTML = dirty;\n    }\n    /* Work on whole document or just its body */\n\n\n    return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n  }; // Safari 10.1+ (unfixed as of time of writing) has a catastrophic bug in\n  // its implementation of DOMParser such that the following executes the\n  // JavaScript:\n  //\n  // new DOMParser()\n  //   .parseFromString('<svg onload=alert(document.domain)>', 'text/html');\n  //\n  // However, Firefox uses a different parser for innerHTML rather than\n  // DOMParser (see https://bugzilla.mozilla.org/show_bug.cgi?id=1205631)\n  // which means that you *must* use DOMParser, otherwise the output may\n  // not be safe if used in a document.write context later.\n  //\n  // So we feature detect the Firefox bug and use the DOMParser if necessary.\n\n\n  if (DOMPurify.isSupported) {\n    (function () {\n      var doc = _initDocument('<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">');\n\n      if (doc.getElementsByTagName('img')[0].hasAttribute('onerror')) {\n        useDOMParser = true;\n      }\n    })();\n  }\n  /**\n   * _createIterator\n   *\n   * @param  document/fragment to create iterator for\n   * @return iterator instance\n   */\n\n\n  var _createIterator = function _createIterator(root) {\n    return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\n      return NodeFilter.FILTER_ACCEPT;\n    }, false);\n  };\n  /**\n   * _isClobbered\n   *\n   * @param  element to check for clobbering attacks\n   * @return true if clobbered, false if safe\n   */\n\n\n  var _isClobbered = function _isClobbered(elm) {\n    if (elm instanceof Text || elm instanceof Comment) {\n      return false;\n    }\n\n    if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function') {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * _isNode\n   *\n   * @param object to check whether it's a DOM node\n   * @return true is object is a DOM node\n   */\n\n\n  var _isNode = function _isNode(obj) {\n    return typeof Node === \"object\" ? obj instanceof Node : obj && typeof obj === \"object\" && typeof obj.nodeType === \"number\" && typeof obj.nodeName === \"string\";\n  };\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   node to check for permission to exist\n   * @return  true if node was killed, false if left alive\n   */\n\n\n  var _sanitizeElements = function _sanitizeElements(currentNode) {\n    var tagName, content;\n    /* Execute a hook if present */\n\n    _executeHook('beforeSanitizeElements', currentNode, null);\n    /* Check if element is clobbered or can clobber */\n\n\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n\n      return true;\n    }\n    /* Now let's check the element's type and name */\n\n\n    tagName = currentNode.nodeName.toLowerCase();\n    /* Execute a hook if present */\n\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName: tagName,\n      allowedTags: ALLOWED_TAGS\n    });\n    /* Remove element if anything forbids its presence */\n\n\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Keep content except for black-listed elements */\n      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {\n        try {\n          currentNode.insertAdjacentHTML('AfterEnd', currentNode.innerHTML);\n        } catch (e) {}\n      }\n\n      _forceRemove(currentNode);\n\n      return true;\n    }\n    /* Convert markup to cover jQuery behavior */\n\n\n    if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild) && /</g.test(currentNode.textContent)) {\n      DOMPurify.removed.push({\n        element: currentNode.cloneNode()\n      });\n      currentNode.innerHTML = currentNode.textContent.replace(/</g, '&lt;');\n    }\n    /* Sanitize element content to be template-safe */\n\n\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      content = content.replace(MUSTACHE_EXPR, ' ');\n      content = content.replace(ERB_EXPR, ' ');\n\n      if (currentNode.textContent !== content) {\n        DOMPurify.removed.push({\n          element: currentNode.cloneNode()\n        });\n        currentNode.textContent = content;\n      }\n    }\n    /* Execute a hook if present */\n\n\n    _executeHook('afterSanitizeElements', currentNode, null);\n\n    return false;\n  };\n\n  var DATA_ATTR = /^data-[\\-\\w.\\u00B7-\\uFFFF]/;\n  var ARIA_ATTR = /^aria-[\\-\\w]+$/;\n  var IS_ALLOWED_URI = /^(?:(?:(?:f|ht)tps?|mailto|tel):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i;\n  var IS_SCRIPT_OR_DATA = /^(?:\\w+script|data):/i;\n  /* This needs to be extensive thanks to Webkit/Blink's behavior */\n\n  var ATTR_WHITESPACE = /[\\x00-\\x20\\xA0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g;\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param   node to sanitize\n   * @return  void\n   */\n\n  var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n    var attr, name, value, lcName, idAttr, attributes, hookEvent, l;\n    /* Execute a hook if present */\n\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n    attributes = currentNode.attributes;\n    /* Check if we have attributes; if not we might have a text node */\n\n    if (!attributes) {\n      return;\n    }\n\n    hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR\n    };\n    l = attributes.length;\n    /* Go backwards over all attributes; safely remove bad ones */\n\n    while (l--) {\n      attr = attributes[l];\n      name = attr.name;\n      value = attr.value.trim();\n      lcName = name.toLowerCase();\n      /* Execute a hook if present */\n\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n      value = hookEvent.attrValue;\n      /* Remove attribute */\n      // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to\n      // remove a \"name\" attribute from an <img> tag that has an \"id\"\n      // attribute at the time.\n\n      if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {\n        idAttr = attributes.id;\n        attributes = Array.prototype.slice.apply(attributes);\n\n        _removeAttribute('id', currentNode);\n\n        _removeAttribute(name, currentNode);\n\n        if (attributes.indexOf(idAttr) > l) {\n          currentNode.setAttribute('id', idAttr.value);\n        }\n      } else if ( // This works around a bug in Safari, where input[type=file]\n      // cannot be dynamically set after type has been removed\n      currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {\n        continue;\n      } else {\n        // This avoids a crash in Safari v9.0 with double-ids.\n        // The trick is to first set the id to be empty and then to\n        // remove the attribute\n        if (name === 'id') {\n          currentNode.setAttribute(name, '');\n        }\n\n        _removeAttribute(name, currentNode);\n      }\n      /* Did the hooks approve of the attribute? */\n\n\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n      /* Make sure attribute cannot clobber */\n\n\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in window || value in document || value in formElement)) {\n        continue;\n      }\n      /* Sanitize attribute content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES) {\n        value = value.replace(MUSTACHE_EXPR, ' ');\n        value = value.replace(ERB_EXPR, ' ');\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n         (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n         XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n         We don't need to check the value; it's always URI safe. */\n\n\n      if (ALLOW_DATA_ATTR && DATA_ATTR.test(lcName)) {// This attribute is safe\n      } else if (ALLOW_ARIA_ATTR && ARIA_ATTR.test(lcName)) {} // This attribute is safe\n\n      /* Otherwise, check the name is permitted */\n      else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n          continue;\n        }\n        /* Check value is safe. First, is attr inert? If so, is safe */\n        else if (URI_SAFE_ATTRIBUTES[lcName]) {} // This attribute is safe\n\n          /* Check no script, data or unknown possibly unsafe URI\n             unless we know URI values are safe for that attribute */\n          else if (IS_ALLOWED_URI.test(value.replace(ATTR_WHITESPACE, ''))) {} // This attribute is safe\n\n            /* Keep image data URIs alive if src/xlink:href is allowed */\n            else if ((lcName === 'src' || lcName === 'xlink:href') && value.indexOf('data:') === 0 && DATA_URI_TAGS[currentNode.nodeName.toLowerCase()]) {} // This attribute is safe\n\n              /* Allow unknown protocols: This provides support for links that\n                 are handled by protocol handlers which may be unknown ahead of\n                 time, e.g. fb:, spotify: */\n              else if (ALLOW_UNKNOWN_PROTOCOLS && !IS_SCRIPT_OR_DATA.test(value.replace(ATTR_WHITESPACE, ''))) {} // This attribute is safe\n\n                /* Check for binary attributes */\n                else if (!value) {} // binary attributes are safe at this point\n\n                  /* Anything else, presume unsafe, do not add it back */\n                  else {\n                      continue;\n                    }\n      /* Handle invalid data-* attribute set by try-catching it */\n\n\n      try {\n        currentNode.setAttribute(name, value);\n        DOMPurify.removed.pop();\n      } catch (e) {}\n    }\n    /* Execute a hook if present */\n\n\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  fragment to iterate over recursively\n   * @return void\n   */\n\n\n  var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n    var shadowNode;\n\n    var shadowIterator = _createIterator(fragment);\n    /* Execute a hook if present */\n\n\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n    while (shadowNode = shadowIterator.nextNode()) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n      /* Sanitize tags and elements */\n\n\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n      /* Deep shadow DOM detected */\n\n\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n      /* Check attributes, sanitize if necessary */\n\n\n      _sanitizeAttributes(shadowNode);\n    }\n    /* Execute a hook if present */\n\n\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode\n   */\n\n\n  var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n\n    hooks[entryPoint].forEach(function (hook) {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n  /**\n   * sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} configuration object\n   */\n\n\n  DOMPurify.sanitize = function (dirty, cfg) {\n    var body, importedNode, currentNode, oldNode, nodeIterator, returnNode;\n    /* Make sure we have a string to sanitize.\n       DO NOT return early, as this will return the wrong type if\n       the user has requested a DOM object rather than a string */\n\n    if (!dirty) {\n      dirty = '<!-->';\n    }\n    /* Stringify, in case dirty is an object */\n\n\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      if (typeof dirty.toString !== 'function') {\n        throw new TypeError('toString is not a function');\n      } else {\n        dirty = dirty.toString();\n      }\n    }\n    /* Check we can run. Otherwise fall back or ignore */\n\n\n    if (!DOMPurify.isSupported) {\n      if (typeof window.toStaticHTML === 'object' || typeof window.toStaticHTML === 'function') {\n        if (typeof dirty === 'string') {\n          return window.toStaticHTML(dirty);\n        } else if (_isNode(dirty)) {\n          return window.toStaticHTML(dirty.outerHTML);\n        }\n      }\n\n      return dirty;\n    }\n    /* Assign config vars */\n\n\n    _parseConfig(cfg);\n    /* Clean up removed elements */\n\n\n    DOMPurify.removed = [];\n\n    if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!-->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else {\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (!RETURN_DOM && !WHOLE_DOCUMENT && dirty.indexOf('<') === -1) {\n        return dirty;\n      }\n      /* Initialize the document to work on */\n\n\n      body = _initDocument(dirty);\n      /* Check we have a DOM node from the data */\n\n      if (!body) {\n        return RETURN_DOM ? null : '';\n      }\n    }\n    /* Remove first element node (ours) if FORCE_BODY is set */\n\n\n    if (FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n    /* Get node iterator */\n\n\n    nodeIterator = _createIterator(body);\n    /* Now start iterating over the created document */\n\n    while (currentNode = nodeIterator.nextNode()) {\n      /* Fix IE's strange behavior with manipulated textNodes #89 */\n      if (currentNode.nodeType === 3 && currentNode === oldNode) {\n        continue;\n      }\n      /* Sanitize tags and elements */\n\n\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n      /* Shadow DOM detected, sanitize it */\n\n\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n      /* Check attributes, sanitize if necessary */\n\n\n      _sanitizeAttributes(currentNode);\n\n      oldNode = currentNode;\n    }\n    /* Return sanitized string or DOM */\n\n\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (RETURN_DOM_IMPORT) {\n        /* adoptNode() is not used because internal state is not reset\n           (e.g. the past names map of a HTMLFormElement), this is safe\n           in theory but we would rather not risk another attack vector.\n           The state that is cloned by importNode() is explicitly defined\n           by the specs. */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    return WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n  };\n  /**\n   * addHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint\n   * @param {Function} hookFunction\n   */\n\n\n  DOMPurify.addHook = function (entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    hooks[entryPoint].push(hookFunction);\n  };\n  /**\n   * removeHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint\n   * @return void\n   */\n\n\n  DOMPurify.removeHook = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint].pop();\n    }\n  };\n  /**\n   * removeHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint\n   * @return void\n   */\n\n\n  DOMPurify.removeHooks = function (entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n  /**\n   * removeAllHooks\n   * Public method to remove all DOMPurify hooks\n   *\n   * @return void\n   */\n\n\n  DOMPurify.removeAllHooks = function () {\n    hooks = {};\n  };\n\n  return DOMPurify;\n});"],"sourceRoot":""}